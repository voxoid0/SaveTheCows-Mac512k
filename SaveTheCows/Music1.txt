'    Music
'    Reads easy to generate music commands and plays them.
'    Any four voice song can be played by simply changing the
'    DATA statements after the label Song:

DEFINT A-Z

DIM r%(4)

    '    F#() contains frequencies for notes in the diatonic scale
    '    octave 0, note A = F#(12) = 55 Hz
    DIM F#(88)
    Log2of27.5# = LOG(27.5#)/LOG(2#)
    FOR x%=1 TO 88
        F#(x%) = 2^(Log2of27.5# + x%/12#)
    NEXT x%

    '    Build fundamental wave form
    '    Controls the quality of the sound
    DIM Timbre(255)
    FOR I=0 TO 255
        READ Timbre(I)
    NEXT I

'These DATA statements were created with the following formula
'Reading these is much faster than executing SIN 1024 times
'   K#=2*3.14159265/256
'   FOR I=0 TO 255
'      Timbre(I)=31*(SIN(I*K#)+SIN(2*I*K#)+SIN(3*I*K#)+SIN(4*I*K#))
'   NEXT I
DATA 0, 8, 15, 23, 30, 37, 44, 51, 57, 63, 69, 74, 79, 83, 87, 91
DATA 93, 96, 98, 99, 100, 100, 100, 99, 98, 97, 95, 92, 89, 86, 83, 79
DATA 75, 71, 66, 62, 57, 52, 48, 43, 39, 34, 30, 25, 21, 18, 14, 11
DATA 8, 5, 3, 0,-1,-3,-4,-5,-5,-6,-6,-5,-5,-4,-3,-1
DATA 0, 2, 3, 5, 7, 9, 11, 13, 15, 17, 18, 20, 21, 23, 24, 25
DATA 26, 26, 27, 27, 27, 27, 27, 26, 25, 24, 23, 22, 20, 18, 17, 15
DATA 13, 11, 9, 7, 5, 3, 1,-1,-3,-5,-6,-8,-9,-10,-11,-12
DATA -12,-13,-13,-13,-13,-13,-12,-11,-11,-10,-8,-7,-6,-4,-3,-2
DATA 0, 2, 3, 4, 6, 7, 8, 10, 11, 11, 12, 13, 13, 13, 13, 13
DATA 12, 12, 11, 10, 9, 8, 6, 5, 3, 1,-1,-3,-5,-7,-9,-11
DATA -13,-15,-17,-18,-20,-22,-23,-24,-25,-26,-27,-27,-27,-27,-27,-26
DATA -26,-25,-24,-23,-21,-20,-18,-17,-15,-13,-11,-9,-7,-5,-3,-2
DATA 0, 1, 3, 4, 5, 5, 6, 6, 5, 5, 4, 3, 1, 0,-3,-5
DATA -8,-11,-14,-18,-21,-25,-30,-34,-39,-43,-48,-52,-57,-62,-66,-71
DATA -75,-79,-83,-86,-89,-92,-95,-97,-98,-99,-100,-100,-100,-99,-98,-96
DATA -93,-91,-87,-83,-79,-74,-69,-63,-57,-51,-44,-37,-30,-23,-15,-8

    WAVE 0,Timbre
    WAVE 1,Timbre
    WAVE 2,Timbre
    WAVE 3,Timbre

    '    Array CF maps MML commands to frequency indices
    C$ = "cdefgabp#-12346890<>l"
    DIM CF(21)
    FOR I=1 TO 21
        READ CF(I)
    NEXT I
    DATA 0,2,4,5,7,9,11,0,1,-1, 0,0,0,0,0,0,0,0, -12,12,0

    '    Array CT# maps MML commands to duration values
    DIM CT#(20)
    FOR I=1 TO 20
        READ CT#(I)
    NEXT I
    '    p1,p2,p3,p4,p6,p8 correspond to 36.4 ... 4.55 time units
    DATA 0,0,0,0,0,0,0,0,0,0, 36.4,18.2,12.133333,9.1,6.0666667,4.55, 2.275,1.1375,0,0,0

    OPEN "Music1Data.txt" FOR OUTPUT AS 1
RePlay:
SOUND RESUME
RESTORE Song

'    Array VO contains the default octave for a voice
FOR v=0 TO 3
  READ VO(v)
  VO(v)=12*VO(v) + 3
NEXT v

Loop:
    SOUND WAIT
    PRINT
    FOR v=0 TO 3
        t#=VT#(v)
        Fi=-1
        READ p$
        'PRINT p$
        IF p$="x" THEN CLOSE #1:END ': RePlay
        di%=0
        FOR I=1 TO LEN(p$)
            Ci=INSTR(C$,MID$(p$,I,1))
            IF Ci>8 THEN 10
                IF Fi>=0 THEN 
                    dataf#(di%)=F#(Fi)
                    datat#(di%)=t#
                    di%=di%+1
                    SOUND F#(Fi),t#,,v: t#=VT#(v)
                END IF
                IF Ci=8 THEN Fi=0 ELSE Fi=CF(Ci)+VO(v)
                GOTO 50
10        IF Ci<11 THEN Fi=Fi+CF(Ci): GOTO 50  '# or -
            IF Ci<19 THEN t#=CT#(Ci): GOTO 50  '1 through 8
            IF Ci<21 THEN VO(v)=VO(v)+CF(Ci): GOTO 50  '< or >
            I=I+1  'ln
            VT#(v)=CT#(INSTR(C$,MID$(p$,I,1)))
            IF Fi<0 THEN t#=VT#(v)
50    NEXT I
        IF Fi>=0 THEN
            dataf#(di%)=F#(Fi)
            datat#(di%)=t#
            di%=di%+1
            SOUND F#(Fi),t#,,v
        END IF
        
        PRINT #1, "DATA ";di%;",";
        FOR d%=0 TO di%-1
            PRINT #1, USING "#.##";dataf#(d%);
            PRINT #1, ",";
            PRINT #1,datat#(d%);",";
        NEXT d%
        PRINT #1,
        
    NEXT v
    SOUND RESUME
    
    PRINT #1, ' next group of voices
    
    GOTO Loop

'    1st 4 numbers are the default octave for each voice (0-7)
'    ln changes the duration for subsequent notes in this voice.
'    l1 = full note, l2 = half note, l4 = quarter notes etc.
'    > increments the octave for this voice
'    < decrements the octave for this voice
'    a through g plays that note.
'    They may be followed by # (sharp) or -(flat).
'    They may also be followed by a digit which specifies
'    the duration for that note.
'    p causes a pause, or rest.

Song:
DATA 1,3,3,3

'Section 1
DATA l4gb,l9pgb>cc#deg,l2p,l2p
DATA >cc#,gdege<b-ag,l2p,l2p
DATA de,b>cc#d<bged,l2p,l2p
DATA l8<al9p>dpl8<dl9p,egeb-pl8al9p,l9pppc#pl8cl9p,l2p

DATA l4gb,l9pgb>cc#deg,l2p,l2p
DATA >cc#,gdege<b-ag,l2p,l2p
DATA de,b>cc#d<bged,l2p,l2p
DATA l9<a>dpl4<gl9p,b-apl4gl9p,l9c#cpl4<bl9p>,l2p

DATA <l9gp>gp<bp>bp,l9pgb>cc#deg,l2p,l2p
DATA <>cp>cp<c#p>c#p,gdege<b-ag,l2p,l2p
DATA <dp>dp<ep>ep,b>cc#d<bged,l2p,l2p
DATA <l9<a>ap>dpl8<dl9p,egeb-pl8al9p,l9pppc#pl8cl9p,l2p

DATA <l9gp>gp<bp>bp,l9pgb>cc#deg,l2p,l2p
DATA <>cp>cp<c#p>c#p,gdege<b-ag,l2p,l2p
DATA <dp>dp<ep>ep,b>cc#d<bged,l2p,l2p
DATA l9<adpl4gl9p,b-apl4gl9p,l9c#cpl8<bl9ged,l2p

' Section 2
DATA l9cppcpppp,l9cppcppp,l9egpgpged,l9eppepppp
DATA c#ppc#pppp,<b-ppb-pppp,egpgpged,eppepppp
DATA dppdppp,bppbpppp,b>dpdpd#ef,gppgpppp
DATA <g>gl8fed,>>c#ddpl8ef,fee-d<b-aa-g,l8gggg

DATA l9cppcpppp,l9cppcppp,l9gepgpded,l9eppepppp
DATA c#ppc#pppp,<b-ppb-pppp,gepgpede,eppepppp
DATA dppdppp,bppbpppp,b>dpdpdpd,gppgpppp
DATA ddpdpdpdl2>>d,l2df#,f#f#pf#pf#pf#l2>c,>ddpdpdpdl2f
DATA l9<d<a>cdc<a-gf#,l2p,l2p,l2p
DATA dfd<c>c<c#>c#d,l2p,l2p,l2p

DATA x

'DATA l8<al16l4>dl16p,egab-aged,l1p,l1p

