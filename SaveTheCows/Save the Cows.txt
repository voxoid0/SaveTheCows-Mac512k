'Joel Becker
'June 16-17, 2018
'For the Macintosh 512k at Farm Credit Services of America
'...if I can get it onto double density floppy successfully.
' This program is meant to be compiled to an application, otherwise it runs too slowly.

DEFINT a-Z
RANDOMIZE 3 'TIMER
SW%=SYSTEM(5):SH%=SYSTEM(6)
SW2%=SW%/2:SH2%=SH%/2
TxtSH%=18:TxtSW%=70
TxtSH2%=TxtSH%/2:TxtSW2%=TxtSW%/2

speed!=4!
tornGDensity!=1.4*speed!*speed!
TornCollision!=.5
MinAng!=-3.1416/2
MaxAng!=3.1416/2
MinVel!=1!
MaxVel!=4!
angChange!=3.1416/180*2
fineAngChange!=3.1416/180/10
velChange!=.25
CowH=16:CowW=32
cowH2=CowH/2:cowW2=CowW/2
BarnH=64:BarnW=64
BarnX=SW-BarnW:BarnY=(SH-BarnH)/2
CowMinX=-SW/4:CowMaxX=SW+SW/4
CowMinY=-SH/4:CowMaxY=SH+SH/4
DIM tornX(20),tornY(20),tornRad(20),tornG!(20)
DIM imgBarn%(258) ' 64x64 / 16 + 2
DIM imgCow%(34) ' 32 x 16 / 16 + 2
soundOn%=1

GOSUB InitData
WHILE (1)
    GOSUB Title
    GOSUB Instructions
    GOSUB Game
WEND
END

InitData:
CLS
PRINT "Loading images..."
RESTORE BarnData
CALL ReadImageData(imgBarn%(),BarnW,BarnH,1)
RESTORE CowData
CALL ReadImageData(imgCow%(),CowW,CowH,0)
'GOTO BeatGame
PRINT "Precalculating gravitation..."
PRINT "    This will take about 3 minutes! But it's totally worth it..."
'PRINT "    (Please ignore the math error messages below...)"
GOSUB InitTornTables
PRINT "Done."
RETURN

Title:
CLS
LOCATE 3,(35-13+1):PRINT "S A V E   T H E   C O W S"
LOCATE TxtSH%-1,1:PRINT "By Joel Becker"
PRINT "June 16, 1988...+30";

tRad1!=SW%/4
tRad2!=tRad1!/4
ty1!=SH%/4:th!=SH2%:ty2!=ty1!+th!
tslope!=(tRad2!-tRad1!)/th!
tAng!=0!

'Draw the tornado
px!=SH2%+tRad1!:py!=ty1!
FOR cy!=0 TO th! STEP 1.6 '.8
    rad!=(tRad1! + cy!*tslope!)
    x!=SW2%+COS(tAng!)*rad!
    y!=ty1!+cy!+SIN(tAng!)*rad!*.1
    LINE (px!,py!)-(x!,y!)
    px!=x!:py!=y!
    tAng!=tAng!+.6
NEXT cy!

' Initialize the tornado cows
DIM tcowRad!(20),tcowAng!(20),tcowCY!(20)
ntCows%=3
RANDOMIZE 1
FOR c%=1 TO ntCows%
    y!=RND*SH2% 
    tcowCY!(c%) = y!+ty1!
    tcowRad!(c%)= tRad1! + y!*tslope! 'RND*(SH2%-y!)+(SW%/8)
    tcowAng!(c%)=RND*3.1416*2!
    CALL DrawTCow(tcowCY!(c%),tcowRad!(c%),tcowAng!(c%))
NEXT c%

' Animate the tornado cows
k$=INKEY$
tcowAngSpeed!=3.1416/18!*speed!
WHILE (MOUSE(0)=-1):WEND
WHILE(INKEY$="") AND MOUSE(0)=0)
    FOR c%=1 TO ntCows%
        CALL DrawTCow(tcowCY!(c%),tcowRad!(c%),tcowAng!(c%))
        tcowAng!(c%)=tcowAng!(c%)+tcowAngSpeed!
        CALL DrawTCow(tcowCY!(c%),tcowRad!(c%),tcowAng!(c%))
    NEXT c%
WEND
ERASE tcowRad!,tcowAng!,tcowCY!
RETURN

Game:
CLS
lvl%=1
lost%=-0
score%=0
WHILE (lvl%<=10 AND lost%=0)
  GOSUB DoLevel
  lvl%=lvl%+1
WEND
IF lost%=1 THEN GOSUB GameOver
IF won%=1 THEN GOSUB BeatGame
RETURN

DoLevel:
GOSUB LevelIntro
GOSUB InitLevel
won%=0
WHILE lost%=0 AND won%=0
  GOSUB EraseLevel
  GOSUB MoveLevel
  GOSUB DrawLevel
WEND
CALL Sleep(2#)
RETURN

GameOver:
CLS
LOCATE TxtSH2,TxtSW2-7:PRINT "GAME OVER"
IF soundOn%=1 THEN SOUND 100,5:SOUND 22000,5:SOUND 75,5:SOUND 22000,5:SOUND 62,5:SOUND 22000,5:SOUND 50,15
GOSUB WaitKey
RETURN

InitLevel:
lost%=0:won%=0
cowsLeft%=3
cowsDied%=0
cowsMadeIt%=0
angle!=0!
vel!=MaxVel! '(MaxVel!+MinVel!)/2!
cowState$="Waiting" ' Flying, Dead, Barn
CLS
CALL UpdateScore(0)
LOCATE 1,1:PRINT "Level ";lvl%
LOCATE TxtSH%,TxtSW%-24:PRINT "[S] Sound On/Off";
GOSUB LoadTornados ' RandomizeTornados
GOSUB DrawCowsLeft
CALL DrawAim(angle!,vel!,1)
GOSUB DrawBarn
RETURN

DrawBarn:
PUT (BarnX,BarnY), imgBarn%,OR
RETURN

RandomizeTornados:
numTorns%=lvl%+5
LOCATE 2,1
FOR t%=1 TO numTorns%
    tornX(t%)=INT(RND*(SW%*3/4))+(SW/8)
    tornY(t%)=INT(RND*(SH%*3/4))+(SH%/8)
    s%=INT(RND*3)
    tornRad(t%)=(s%+3)*(SH%/48)
    tornG!(t%)=tornRad(t%)*tornRad(t%)*tornGDensity!
    CALL DrawTorn(tornX(t%), tornY(t%), tornRad(t%))
    'PRINT TAB(5);"DATA ";tornX(t%)/SW;","tornY(t%)/SH;",";s%
NEXT t%
RETURN

'=tornRad(t%)*tornRad(t%)*tornGDensity!


InitTornTables:
DEF FNTRad(s%)=(s%+2)*(SH%/48)
'TTSize=64    ' actually only indices 1-63 are filled, with 32 at center
TTSize=56
TTSize2=TTSize/2
TTStep=8 '256/TTSize
TTRSize2=TTSize2*TTStep
DIM tornAX!(2,TTSize,TTSize), tornAY!(3,TTSize,TTSize)
FOR s%=0 TO 2  ' Each tornado size
    r%=FNTRad(s%+1)
    g!=r%*r%*tornGDensity!
    FOR dy%=0 TO TTSize2-1
    'PRINT "dy=";dy%
    'PRINT "dx=";
    FOR dx%=dy% TO TTSize2-1
        IF dx%=0 AND dy%=0 THEN GOTO SkipTornTabSample
        'PRINT dx%;",";
        rdx&=dx%*TTStep:rdy&=dy%*TTStep
        distSq&=rdx&*rdx&+rdy&*rdy&
        dist!=SQR(distSq&)
        ax!=rdx&/(dist!*distSq&) * g!
        ay!=rdy&/(dist!*distSq&) * g!

        ' Quadrant I
        x%=TTSize2+dx%
        y%=TTSize2+dy%
        tornAX!(s%,x%,y%)=-ax!
        tornAY!(s%,x%,y%)=-ay!
        tornAX!(s%,y%,x%)=-ay!
        tornAY!(s%,y%,x%)=-ax!

        ' Quadrant II
        x%=TTSize2-dx%
        y%=TTSize2+dy%
        tornAX!(s%,x%,y%)=ax!
        tornAY!(s%,x%,y%)=-ay!
        tornAX!(s%,y%,x%)=-ay!
        tornAY!(s%,y%,x%)=ax!

        ' Quadrant III
        x%=TTSize2-dx%
        y%=TTSize2-dy%
        tornAX!(s%,x%,y%)=ax!
        tornAY!(s%,x%,y%)=ay!
        tornAX!(s%,y%,x%)=ay!
        tornAY!(s%,y%,x%)=ax!

        ' Quadrant IV
        x%=TTSize2+dx%
        y%=TTSize2-dy%
        tornAX!(s%,x%,y%)=-ax!
        tornAY!(s%,x%,y%)=ay!
        tornAX!(s%,y%,x%)=ay!
        tornAY!(s%,y%,x%)=-ax!
SkipTornTabSample:
NEXT dx%,dy%,s%
RETURN
' The following is for seeing a sampling of the vector values in a grid
' remove the above RETURN statement to see
GOSUB WaitKey
CLS
FOR y%=4 TO TTSize-1 STEP 9
    FOR x%=4 TO TTSize-1 STEP 9
        PRINT USING "#.##";tornAX!(0,x%,y%);
        PRINT ",";
        PRINT USING "#.##";tornAY!(0,x%,y%);
        PRINT "|";
    NEXT x%
    PRINT
NEXT y%
GOSUB WaitKey
RETURN

LoadTornados:
RESTORE LevelData
' Skip to current level's data
FOR l%=1 TO lvl%-1
    READ numTorns%
    FOR t%=1 TO numTorns%:READ x!,y!,s%:NEXT t%
NEXT l%
'Load current level
READ numTorns%
FOR t%=1 TO numTorns%
    READ x!,y!,s%
    tornX(t%)=INT(x!*SW)
    tornY(t%)=INT(y!*SH)
    tornS%(t%)=s%-1
    tornRad(t%)=(s%+2)*(SH%/48)
    tornCollRad%(t%)=tornRad(t%)+cowH2
    tornG!(t%)=tornRad(t%)*tornRad(t%)*tornGDensity!
    CALL DrawTorn(tornX(t%), tornY(t%), tornRad(t%))
NEXT t%
'GOSUB PrecalcForces
RETURN

PrecalcForces:
DIM lax!(128, 86),lay!(128,86)
FOR y%=2 TO SH-1 STEP 4
PSET (SW2,y%)
FOR x%=2 TO SW-1 STEP 4
gx%=x%/4:gy%=y%/4
lax!(gx%,gy%)=0:lay!(gx%,gy%)=0
FOR t%=1 TO numTorns%
    dx!=tornX(t%)-x%
    dy!=tornY(t%)-y%
    distSq!=dx!*dx! + dy!*dy!
    dist!=SQR(distSq!)
    ax!=dx!/(dist!*distSq!) * tornG!(t%)
    ay!=dy!/(dist!*distSq!) * tornG!(t%)
    lax!(gx%,gy%) = lax!(gx%,gy%) + ax!
    lay!(gx%,gy%) = lay!(gx%,gy%) + ay!
NEXT t%,x%,y%
RETURN

LevelIntro:
CLS
LOCATE  TxtSH2%,TxtSW2%-7
PRINT "Level "+STR$(lvl%)
GOSUB WaitKey
RETURN

Instructions:
CLS
PRINT
PRINT
PRINT "GOAL: THROW all COWS past the TORNADOS, into the BARN for (relative) safety."
PRINT "You need to get at least one of your cows to safety in each level, otherwise"
PRINT "what are you gunna use FOR burgers 'n' steaks?"
PRINT
PRINT "CONTROLS:"
PRINT "Move the mouse to control angle and velocity. Click to throw a cow."
PRINT
PRINT "TIP: Use the suction power of the tornados to guide the cows to safety."
PRINT "Also, don't try this at home."
PRINT
GOSUB WaitKey
RETURN

WaitKey:
i$=INKEY$
WHILE INKEY$<>"" OR MOUSE(0)<>0:WEND
WHILE INKEY$="":WEND AND MOUSE(0)=0:WEND
WHILE MOUSE(0)=-1:WEND
RETURN

EraseLevel:
'CALL DrawAim(angle!,vel!,0)
RETURN

MoveLevel:
'GOSUB HandleKeys
GOSUB HandleMouse
GOSUB MoveCow
RETURN

HandleMouse:
IF (cowState$="Flying") THEN RETURN
IF MOUSE(0)=-1 THEN
    GOSUB TossCow'
ELSE

    dx=MOUSE(1)
    dy=MOUSE(2)-SH2

    'a!=dy/SH2*1.5708*1.5
    'IF a!>1.5708 THEN a!=1.5708
    'IF a!<-1.5708 THEN a!=-1.5708
    'v!=dx/SW2*MaxVel!
    'IF (v! < MinVel!) THEN v!=MinVel!
    'IF (v! > MaxVel!) THEN v!=MaxVel!

    IF dx=0 THEN
        IF dy>0 THEN a!=3.1416/2 ELSE a!=-3.1416/2
    ELSE
        a!=ATN(dy/dx)
    END IF
    a!=INT(a!*90/3.1416)*3.1416/90

    v!=INT(SQR(dx*dx+dy*dy)/(SH*.4)*MaxVel!*4)/4!
    IF (v! < MinVel!) THEN v!=MinVel!
    IF (v! > MaxVel!) THEN v!=MaxVel!

    GOSUB EraseAim
    angle!=a!:vel!=v!
    GOSUB DrawAim
END IF
RETURN

HandleKeys:
IF (cowState$="Flying") THEN RETURN
k$=UCASE$(INKEY$)
IF k$="" THEN RETURN
IF k$=CHR$(29) AND angle!<MaxAng! THEN 'Right
  GOSUB EraseAim
  angle!=angle!+angChange!
  GOSUB DrawAim
ELSEIF k$="A" AND angle!>MinAng! THEN 'Left
  GOSUB EraseAim
  angle!=angle!-fineAngChange!
  GOSUB DrawAim
ELSEIF k$="D" AND angle!<MaxAng! THEN 'Right
  GOSUB EraseAim
  angle!=angle!+fineAngChange!
  GOSUB DrawAim
ELSEIF k$=CHR$(28) AND angle!>MinAng! THEN 'Left
  GOSUB EraseAim
  angle!=angle!-angChange!
  GOSUB DrawAim
ELSEIF k$=CHR$(30) AND vel!<MaxVel! THEN 'Up
  GOSUB EraseAim
  vel!=vel!+velChange!
  GOSUB DrawAim
ELSEIF k$=CHR$(31) AND vel!>MinVel! THEN 'Down
  GOSUB EraseAim
  vel!=vel!-velChange!
  GOSUB DrawAim
ELSEIF k$="W" AND vel!<MaxVel! THEN 'Up
  GOSUB EraseAim
  vel!=vel!+fineVelChange!
  GOSUB DrawAim
ELSEIF k$="S" AND vel!>MinVel! THEN 'Down
  GOSUB EraseAim
  vel!=vel!-fineVelChange!
  GOSUB DrawAim
ELSEIF k$=" " THEN
    GOSUB TossCow
ELSEIF k$="S" OR k$="s" THEN
    SOUND 440,1
    IF soundOn%=1 THEN soundOn%=0:ELSE soundOn%=1
END IF
RETURN

TossCow:
IF (cowState$ = "Flying") THEN RETURN
cowX!=CowW/2:cowY!=(SH%-CowH)/2
cowState$="Flying"
cowsLeft%=cowsLeft%-1
GOSUB DrawCowsLeft
cowXV!=vel!*COS(angle!)*speed!
cowYV!=vel!*SIN(angle!)*speed!
GOSUB DrawFlyingCow 'Prime the pump so initial cow isn't left behind
RETURN

DrawFlyingCow:
PUT (cowX!-cowW2,cowY!-cowH2),imgCow%,XOR
RETURN

CalcCowMove:
'Important to use integer math as much as possible
'since the Mac 128k/512k has no floating point unit; fp is done in software!
IF (cowState$ <> "Flying") THEN RETURN
FOR t%=1 TO numTorns%
    dx%=tornX(t%)-INT(cowX!)
    dy%=tornY(t%)-INT(cowY!)
    distSq&=dx%*dx% + dy%*dy%
    dist%=SQR(distSq&)
    IF dist% < tornCollRad%(t%) THEN
        GOSUB TornadoGotCow
        RETURN
    END IF
    ax!=dx%/(dist%*distSq&) * tornG!(t%)
    ay!=dy%/(dist%*distSq&) * tornG!(t%)
    cowXV!=cowXV!+ax!
    cowYV!=cowYV!+ay!
NEXT t%
RETURN

CalcCowMoveLevelTable:
IF (cowState$ <> "Flying") THEN RETURN
FOR t%=1 TO numTorns%
    dx%=tornX(t%)-INT(cowX!)
    dy%=tornY(t%)-INT(cowY!)
    distSq%=dx%*dx% + dy%*dy%
    IF (distSq% < CowH+(tornRad(t%)*TornCollision!)) THEN
    'IF dist! < CowH+(tornRad(t%)*TornCollision!) THEN
        GOSUB TornadoGotCow
        RETURN
    END IF
NEXT t%
cowXV! = cowXV! + lax!(INT(cowX!)/4)
cowYV! = cowYV! + lay!(INT(cowY!)/4)
RETURN

MoveCow:
IF (cowState$ <> "Flying") THEN RETURN
GOSUB CalcCowMove 'TornTable
IF (cowState$ <> "Flying") THEN RETURN
'GOSUB DrawFlyingCow
cowix%=INT(cowX!):cowiy%=INT(cowY!)
PUT (cowix%-cowW2,cowiy%-cowH2),imgCow%,XOR
cowX!=cowX!+cowXV!
cowY!=cowY!+cowYV!
cowix%=INT(cowX!):cowiy%=INT(cowY!)
'GOSUB DrawFlyingCow
PUT (cowix%-cowW2,cowiy%-cowH2),imgCow%,XOR
'PSET (cowix%,cowiy%)
IF cowix% > BarnX-cowW2 AND cowix% < BarnX+BarnW+cowW2 AND cowiy% > BarnY-cowH2 AND cowiy% < BarnY+BarnH+cowH2 THEN GOSUB CowMadeIt
IF cowix% > CowMaxX OR cowix% < CowMinX OR cowiy% > CowMaxY OR cowiy% < CowMinY THEN GOSUB CowWentByeBye
RETURN

CalcCowMoveTornTable:
FOR t%=1 TO numTorns%
    dx%=INT(cowX!)-tornX(t%)
    dy%=INT(cowY!)-tornY(t%)
    IF (ABS(dx%)+ABS(dy%)) < tornCollRad%(t%) THEN    ' Inset diamond collision shape
        GOSUB TornadoGotCow
        RETURN
    END IF
    IF (ABS(dx%) < TTRSize2 AND ABS(dy%) < TTRSize2) THEN
        tdx%=TTSize2 + dx%/TTStep
        tdy%=TTSize2 + dy%/TTStep
        cowXV!=cowXV!+tornAX!(tornS%(t%), tdx%, tdy%)
        cowYV!=cowYV!+tornAY!(tornS%(t%), tdx%, tdy%)
    END IF
NEXT t%
RETURN

TornadoGotCow:
GOSUB DrawFlyingCow 'Erase (with XOR)
IF soundOn%=1 THEN SOUND 200,4:SOUND 140,8
cowsDied=cowsDied+1
cowState$="Dead"
GOSUB CheckLevelDone
RETURN

CowMadeIt:
cowsMadeIt%=cowsMadeIt%+1
CALL UpdateScore(lvl%*100)
cowState$="Barn"
GOSUB DrawFlyingCow ' Erase (with XOR)
GOSUB DrawBarnCowStack
IF soundOn%=1 THEN SOUND 400,1:SOUND 500,1:SOUND 600,1:SOUND 800,1
GOSUB CheckLevelDone
RETURN

DrawBarnCowStack:
CALL DrawCowStack(BarnX,BarnY,cowsMadeIt%)
RETURN

DrawCowsLeft:
CALL DrawCowStack(0,SH2%,cowsLeft%)
RETURN

CowWentByeBye:
cowsDied=cowsDied+1
cowState$="Dead"
IF soundOn%=1 THEN FOR f%=1600 TO 1400 STEP -20:SOUND f%,2:NEXT f%
GOSUB CheckLevelDone
RETURN

EraseAim:
CALL DrawAim(angle!,vel!,0)
RETURN

DrawAim:
CALL DrawAim(angle!,vel!,1)
RETURN

DrawLevel:
'CALL DrawAim(angle!,vel!,1)
RETURN

CheckLevelDone:
    IF cowsLeft%>0 THEN RETURN
    IF cowsMadeIt%=0 THEN 
        lost%=1
    ELSE
        won%=1
    END IF
RETURN

LevelData:
' Level 1
DATA 1
DATA 0.5,0.5,2
' Level 2
DATA 2
DATA 0.25,0.6,2
DATA 0.75,0.4,1
'Level 3
DATA 3
DATA 0.3,0.67,1
DATA 0.5,0.5,1
DATA 0.7,0.67,1
' Level 4
DATA 2
DATA 0.4,0.25,3
DATA 0.6,0.66,1
' Level 5
DATA 3
DATA 0.8,0.4,2
DATA 0.8,0.6,1
DATA 0.4,0.75,2
' Level 6
DATA 3
DATA 0.25,0.6,2
DATA 0.4,0.3,1
DATA 0.6,0.7,1
'Level 7
DATA 4
DATA 0.25, 0.25, 3
DATA 0.35, 0.75, 3
DATA 0.65, 0.25, 3
DATA 0.75, 0.75, 3
'Level 8
DATA 5
DATA 0.25,0.25,2
DATA 0.75,0.25,2
DATA 0.5,0.5,2
DATA 0.25,0.75,2
DATA 0.75,0.75,2
'Level 9
DATA 6
DATA 0.25, 0.4, 3
DATA 0.35, 0.75, 3
DATA 0.65, 0.25, 3
DATA 0.9, 0.05, 3
DATA 0.9,0.65,1
DATA 0.85,0.5,1
'Level 10
'DATA 1
'DATA 0.23,0.5,1
DATA 6
DATA 0.28,0.6,2
DATA 0.15,0.7,2
DATA 0.5,0.5,3
DATA 0.4,0.6,3
DATA 0.64,0.66,2
'DATA 0.67,0.62,2
DATA 0.90,0.65,2
'data 0.95,0.7,2

BarnData:
DATA &Hffff,&Hffff,&Hf3ff,&Hffff,&Hffff,&Hffff,&Hc1ff,&Hffff
DATA &Hffff,&Hffff,&H007f,&Hffff,&Hffff,&Hfff8,&H003f,&Hffff
DATA &Hffff,&Hfff0,&H000f,&Hffff,&Hffff,&Hfff0,&H0007,&Hffff
DATA &Hffff,&Hfff0,&H0001,&Hffff,&Hffff,&Hfbf0,&H0000,&H7fff
DATA &Hffff,&Hfbf0,&H0000,&H3fff,&Hffff,&Hbff0,&H0000,&H0fff
DATA &Hffff,&Hf7f0,&H0000,&H07ff,&Hfffe,&Hfff0,&H0000,&H01ff
DATA &Hffef,&Heef0,&H0000,&H007f,&Hfef5,&Hbef0,&H0000,&H003f
DATA &Hf8fa,&Hdff0,&H0000,&H000f,&He0fd,&Hfef0,&H0000,&H0007
DATA &He0ee,&Hbef0,&H0000,&H0007,&He0e6,&H7ff0,&H0000,&H0007
DATA &He0ef,&Hfef0,&H0000,&H0007,&He0ef,&Hf6f0,&H0000,&H0007
DATA &He0e7,&Hdff0,&H0000,&H0007,&He0ef,&Heef0,&H0000,&H0007
DATA &He0ef,&Hf6f0,&H0000,&H0007,&He0e3,&Hfbf0,&H0000,&H0007
DATA &He0ef,&H7cf0,&H0800,&H0007,&He0ef,&Hbcf0,&H1800,&H0007
DATA &He0ee,&Hfef0,&H1000,&H0007,&He0ef,&Hf7f0,&H1000,&H0007
DATA &He0fd,&Hb7f0,&H1000,&H0007,&He0ff,&Hc1f0,&H3000,&H0007
DATA &He0f8,&H1ff0,&H3000,&H0007,&He0f1,&Hffe0,&H2000,&H0007
DATA &He0ff,&Hf800,&H2000,&H0001,&He0ff,&H0000,&H6000,&H0001
DATA &He000,&H0000,&H4000,&H0001,&Hf000,&H0000,&H4000,&H0001
DATA &Hf000,&H0000,&Hc000,&H0003,&Hf000,&H0000,&Hc000,&H0003
DATA &Hf800,&H0000,&H8000,&H0003,&Hf800,&H0000,&H8000,&H0007
DATA &Hf800,&H0001,&H8000,&H0007,&Hf800,&H0001,&H8000,&H0007
DATA &Hfc03,&Hfc01,&H0000,&H0007,&Hfc03,&Hfc01,&H0000,&H0007
DATA &Hfc02,&Hfc03,&H0000,&H000f,&Hfe02,&Hfc02,&H0000,&H000f
DATA &Hfe02,&Hfc02,&H0000,&H000f,&Hfe02,&Hfc06,&H0000,&H000f
DATA &Hfe02,&Hfc06,&H0000,&H001f,&Hff02,&Hfc04,&H0000,&H001f
DATA &Hff03,&Hfc04,&H0000,&H001f,&Hff00,&H080c,&H0000,&H001f
DATA &Hff80,&H0018,&H0000,&H003f,&Hffc0,&H0030,&H0000,&H00ff
DATA &Hffe0,&H0060,&H0000,&H01ff,&Hfff8,&H00e0,&H0000,&H03ff
DATA &Hfffc,&H01c0,&H0000,&H07ff,&Hfffe,&H0180,&H0000,&H0fff
DATA &Hffff,&H0300,&H0000,&H3fff,&Hffff,&Hc600,&H0000,&H7fff
DATA &Hffff,&Hec00,&H00ff,&Hffff,&Hffff,&Hf801,&Hffff,&Hffff
DATA &Hffff,&Hf07f,&Hffff,&Hffff,&Hffff,&Hffff,&Hffff,&Hffff

CowData:
' 32x16
DATA &H0018,&H03c0,&H0018,&H0340,&H0008,&H0140,&H0018,&H0110
DATA &H0028,&H01b0,&H0028,&H0350,&H006f,&Hfe50,&H00ef,&Hfe50
DATA &H00ef,&Hde50,&H01e3,&Hfc50,&H03f7,&Hef30,&H07f3,&Hf770
DATA &H05f1,&Hff70,&H05e7,&Hffa0,&H1def,&He980,&H0cc0,&H0000

' *************************************
BeatGame: 
CLS
LOCATE 3,27:PRINT "T H E   E N D"
LINE (0,SH2)-(SW,SH2)
PUT (SW2-BarnW/2,SH2-BarnH/2),imgBarn%,PSET
DIM ecowx%(15),ecowy%(15)
nCows%=15
dance%=4
RANDOMIZE 26
FOR c%=1 TO nCows%
    ecowx%(c%)=INT(RND*(SW-CowW))
    ecowy%(c%)=INT(RND*(SH/4))+(SH2)
    PUT (ecowx%(c%)-dance%,ecowy%(c%)),imgCow%,XOR
NEXT c%
'nCows%=3 ' Too many dancing cows is too slow
' Fence
LINE(0,SH-64)-(SW,SH-64)
LINE (0,SH-56)-(SW,SH-56)
FOR x%=8 TO SW STEP 36:LINE(x%,SH-68)-(x%,SH-52):NEXT x%
' Sun
sunx=SW*.75:suny=SH2-64
CIRCLE(sunx, suny),32
FOR a!=0! TO 6.28 STEP 3.14/6
    LINE (sunx + COS(a!)*36,suny + SIN(a!)*36)-(sunx + COS(a!)*48,suny + SIN(a!)*48)
NEXT a!

'PRINT "Wowy Zowy, you're one cowstanding, agtastic farmer!!"
'PRINT "Thanks for playing!"

BeatGameInitMusic:
DIM r%(4)
    RESTORE BeatGameInitMusic
    '    F#() contains frequencies for notes in the diatonic scale
    '    octave 0, note A = F#(12) = 55 Hz
    'DIM f#(88)
    'Log2of27.5# = LOG(27.5#)/LOG(2#)
    'FOR x%=1 TO 88
    '    f#(x%) = 2^(Log2of27.5# + x%/12#)
    'NEXT x%

    '    Build fundamental wave form
    '    Controls the quality of the sound
    DIM Timbre(255)
    FOR i=0 TO 255
        READ Timbre(i)
    NEXT i

'These DATA statements were created with the following formula
'Reading these is much faster than executing SIN 1024 times
'   K#=2*3.14159265/256
'   FOR I=0 TO 255
'      Timbre(I)=31*(SIN(I*K#)+SIN(2*I*K#)+SIN(3*I*K#)+SIN(4*I*K#))
'   NEXT I
DATA 0, 8, 15, 23, 30, 37, 44, 51, 57, 63, 69, 74, 79, 83, 87, 91
DATA 93, 96, 98, 99, 100, 100, 100, 99, 98, 97, 95, 92, 89, 86, 83, 79
DATA 75, 71, 66, 62, 57, 52, 48, 43, 39, 34, 30, 25, 21, 18, 14, 11
DATA 8, 5, 3, 0,-1,-3,-4,-5,-5,-6,-6,-5,-5,-4,-3,-1
DATA 0, 2, 3, 5, 7, 9, 11, 13, 15, 17, 18, 20, 21, 23, 24, 25
DATA 26, 26, 27, 27, 27, 27, 27, 26, 25, 24, 23, 22, 20, 18, 17, 15
DATA 13, 11, 9, 7, 5, 3, 1,-1,-3,-5,-6,-8,-9,-10,-11,-12
DATA -12,-13,-13,-13,-13,-13,-12,-11,-11,-10,-8,-7,-6,-4,-3,-2
DATA 0, 2, 3, 4, 6, 7, 8, 10, 11, 11, 12, 13, 13, 13, 13, 13
DATA 12, 12, 11, 10, 9, 8, 6, 5, 3, 1,-1,-3,-5,-7,-9,-11
DATA -13,-15,-17,-18,-20,-22,-23,-24,-25,-26,-27,-27,-27,-27,-27,-26
DATA -26,-25,-24,-23,-21,-20,-18,-17,-15,-13,-11,-9,-7,-5,-3,-2
DATA 0, 1, 3, 4, 5, 5, 6, 6, 5, 5, 4, 3, 1, 0,-3,-5
DATA -8,-11,-14,-18,-21,-25,-30,-34,-39,-43,-48,-52,-57,-62,-66,-71
DATA -75,-79,-83,-86,-89,-92,-95,-97,-98,-99,-100,-100,-100,-99,-98,-96
DATA -93,-91,-87,-83,-79,-74,-69,-63,-57,-51,-44,-37,-30,-23,-15,-8

    WAVE 0,Timbre
    WAVE 1,Timbre
    WAVE 2,Timbre
    WAVE 3,Timbre
    
    GOTO RePlay

    '    Array CF maps MML commands to frequency indices
    c$ = "cdefgabp#-12346890<>l"
    DIM CF(21)
    FOR i=1 TO 21
        READ CF(i)
    NEXT i
    DATA 0,2,4,5,7,9,11,0,1,-1, 0,0,0,0,0,0,0,0, -12,12,0

    '    Array CT# maps MML commands to duration values
    DIM CT#(20)
    FOR i=1 TO 20
        READ CT#(i)
    NEXT i
    '    p1,p2,p3,p4,p6,p8 correspond to 36.4 ... 4.55 time units
    DATA 0,0,0,0,0,0,0,0,0,0, 36.4,18.2,12.133333,9.1,6.0666667,4.55, 2.275,1.1375,0,0,0

RePlay:
SOUND RESUME
RESTORE Song

'    Array VO contains the default octave for a voice
FOR v=0 TO 3
  READ VO(v)
  VO(v)=12*VO(v) + 3
NEXT v

RESTORE SongDataRaw
cc%=0
BeatGameMusicLoop:
    IF (INKEY$=CHR$(27)) THEN END
    c%=(cc%/2) MOD nCows% + 1
    cc%=cc%+1
        PUT (ecowx%(c%)-dance%,ecowy%(c%)),imgCow%,XOR
        PUT (ecowx%(c%)+dance%,ecowy%(c%)),imgCow%,XOR
    dance%=-dance%

    SOUND WAIT
    FOR v=0 TO 3
        t#=VT#(v)
        Fi=-1
        READ cnt%
        IF cnt%=0 THEN RePlay
        FOR i=1 TO cnt%
            READ f#,t#
            SOUND f#,t#,,v
        NEXT i
    NEXT v
    SOUND RESUME
    GOTO BeatGameMusicLoop


Old:
    SOUND WAIT
    FOR v=0 TO 3
        t#=VT#(v)
        Fi=-1
        READ p$
        IF p$="x" THEN RePlay
        FOR i=1 TO LEN(p$)
            Ci=INSTR(c$,MID$(p$,i,1))
            IF Ci>8 THEN 10
                IF Fi>=0 THEN SOUND f#(Fi),t#,,v: t#=VT#(v)
                IF Ci=8 THEN Fi=0 ELSE Fi=CF(Ci)+VO(v)
                GOTO 50
10        IF Ci<11 THEN Fi=Fi+CF(Ci): GOTO 50  '# or -
            IF Ci<19 THEN t#=CT#(Ci): GOTO 50  '1 through 8
            IF Ci<21 THEN VO(v)=VO(v)+CF(Ci): GOTO 50  '< or >
            i=i+1  'ln
            VT#(v)=CT#(INSTR(c$,MID$(p$,i,1)))
            IF Fi<0 THEN t#=VT#(v)
50    NEXT i
        IF Fi>=0 THEN SOUND f#(Fi),t#,,v
    NEXT v
    SOUND RESUME
    GOTO BeatGameMusicLoop

'    1st 4 numbers are the default octave for each voice (0-7)
'    ln changes the duration for subsequent notes in this voice.
'    l1 = full note, l2 = half note, l4 = quarter notes etc.
'    > increments the octave for this voice
'    < decrements the octave for this voice
'    a through g plays that note.
'    They may be followed by # (sharp) or -(flat).
'    They may also be followed by a digit which specifies
'    the duration for that note.
'    p causes a pause, or rest.

Song:
DATA 1,3,3,3

'Section 1
DATA l4gb,l9pgb>cc#deg,l2p,l2p
DATA >cc#,gdege<b-ag,l2p,l2p
DATA de,b>cc#d<bged,l2p,l2p
DATA l8<al9p>dpl8<dl9p,egeb-pl8al9p,l9pppc#pl8cl9p,l2p

DATA l4gb,l9pgb>cc#deg,l2p,l2p
DATA >cc#,gdege<b-ag,l2p,l2p
DATA de,b>cc#d<bged,l2p,l2p
DATA l9<a>dpl4<gl9p,b-apl4gl9p,l9c#cpl4<bl9p>,l2p

DATA <l9gp>gp<bp>bp,l9pgb>cc#deg,l2p,l2p
DATA <>cp>cp<c#p>c#p,gdege<b-ag,l2p,l2p
DATA <dp>dp<ep>ep,b>cc#d<bged,l2p,l2p
DATA <l9<a>ap>dpl8<dl9p,egeb-pl8al9p,l9pppc#pl8cl9p,l2p

DATA <l9gp>gp<bp>bp,l9pgb>cc#deg,l2p,l2p
DATA <>cp>cp<c#p>c#p,gdege<b-ag,l2p,l2p
DATA <dp>dp<ep>ep,b>cc#d<bged,l2p,l2p
DATA l9<adpl4gl9p,b-apl4gl9p,l9c#cpl8<bl9ged,l2p

' Section 2
DATA l9cppcpppp,l9cppcppp,l9egpgpged,l9eppepppp
DATA c#ppc#pppp,<b-ppb-pppp,egpgpged,eppepppp
DATA dppdppp,bppbpppp,b>dpdpd#ef,gppgpppp
DATA <g>gl8fed,>>c#ddpl8ef,fee-d<b-aa-g,l8gggg

DATA l9cppcpppp,l9cppcppp,l9gepgpded,l9eppepppp
DATA c#ppc#pppp,<b-ppb-pppp,gepgpede,eppepppp
DATA dppdppp,bppbpppp,b>dpdpdpd,gppgpppp
DATA ddpdpdpdl2>>d,l2df#,f#f#pf#pf#pf#l2>c,>ddpdpdpdl2f
DATA l9<d<a>cdc<a-gf#,l2p,l2p,l2p
DATA dfd<c>c<c#>c#d,l2p,l2p,l2p

DATA x
' *************************************

SongDataRaw:
DATA  2 ,  98.00, 9.1 , 123.47, 9.1 
DATA  8 ,   0.00, 2.275 , 392.00, 2.275 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  2 , 130.81, 9.1 , 138.59, 9.1 
DATA  8 , 783.99, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 , 659.26, 2.275 , 466.16, 2.275 , 440.00, 2.275 , 392.00, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  2 , 146.83, 9.1 , 164.81, 9.1 
DATA  8 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 493.88, 2.275 , 392.00, 2.275 , 329.63, 2.275 , 293.66, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  6 , 110.00, 4.55 ,   0.00, 2.275 , 146.83, 2.275 ,   0.00, 2.275 ,  73.42, 4.55 ,   0.00, 2.275 
DATA  7 , 329.63, 2.275 , 392.00, 2.275 , 329.63, 2.275 , 466.16, 2.275 ,   0.00, 2.275 , 440.00, 4.55 ,   0.00, 2.275 
DATA  7 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 277.18, 2.275 ,   0.00, 2.275 , 261.63, 4.55 ,   0.00, 2.275 
DATA  1 ,   0.00, 18.2 

DATA  2 ,  98.00, 9.1 , 123.47, 9.1 
DATA  8 ,   0.00, 2.275 , 392.00, 2.275 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  2 , 130.81, 9.1 , 138.59, 9.1 
DATA  8 , 783.99, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 , 659.26, 2.275 , 466.16, 2.275 , 440.00, 2.275 , 392.00, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  2 , 146.83, 9.1 , 164.81, 9.1 
DATA  8 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 493.88, 2.275 , 392.00, 2.275 , 329.63, 2.275 , 293.66, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  5 , 110.00, 2.275 , 146.83, 2.275 ,   0.00, 2.275 ,  98.00, 9.1 ,   0.00, 2.275 
DATA  5 , 466.16, 2.275 , 440.00, 2.275 ,   0.00, 2.275 , 392.00, 9.1 ,   0.00, 2.275 
DATA  5 , 277.18, 2.275 , 261.63, 2.275 ,   0.00, 2.275 , 246.94, 9.1 ,   0.00, 2.275 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  49.00, 2.275 ,   0.00, 2.275 ,  98.00, 2.275 ,   0.00, 2.275 ,  61.74, 2.275 ,   0.00, 2.275 , 123.47, 2.275 ,   0.00, 2.275 
DATA  8 ,   0.00, 2.275 , 392.00, 2.275 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  65.41, 2.275 ,   0.00, 2.275 , 130.81, 2.275 ,   0.00, 2.275 ,  69.30, 2.275 ,   0.00, 2.275 , 138.59, 2.275 ,   0.00, 2.275 
DATA  8 , 783.99, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 , 659.26, 2.275 , 466.16, 2.275 , 440.00, 2.275 , 392.00, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  73.42, 2.275 ,   0.00, 2.275 , 146.83, 2.275 ,   0.00, 2.275 ,  82.41, 2.275 ,   0.00, 2.275 , 164.81, 2.275 ,   0.00, 2.275 
DATA  8 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 493.88, 2.275 , 392.00, 2.275 , 329.63, 2.275 , 293.66, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  7 ,  55.00, 2.275 , 110.00, 2.275 ,   0.00, 2.275 , 146.83, 2.275 ,   0.00, 2.275 ,  73.42, 4.55 ,   0.00, 2.275 
DATA  7 , 329.63, 2.275 , 392.00, 2.275 , 329.63, 2.275 , 466.16, 2.275 ,   0.00, 2.275 , 440.00, 4.55 ,   0.00, 2.275 
DATA  7 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 277.18, 2.275 ,   0.00, 2.275 , 261.63, 4.55 ,   0.00, 2.275 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  49.00, 2.275 ,   0.00, 2.275 ,  98.00, 2.275 ,   0.00, 2.275 ,  61.74, 2.275 ,   0.00, 2.275 , 123.47, 2.275 ,   0.00, 2.275 
DATA  8 ,   0.00, 2.275 , 392.00, 2.275 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  65.41, 2.275 ,   0.00, 2.275 , 130.81, 2.275 ,   0.00, 2.275 ,  69.30, 2.275 ,   0.00, 2.275 , 138.59, 2.275 ,   0.00, 2.275 
DATA  8 , 783.99, 2.275 , 587.33, 2.275 , 659.26, 2.275 , 783.99, 2.275 , 659.26, 2.275 , 466.16, 2.275 , 440.00, 2.275 , 392.00, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  73.42, 2.275 ,   0.00, 2.275 , 146.83, 2.275 ,   0.00, 2.275 ,  82.41, 2.275 ,   0.00, 2.275 , 164.81, 2.275 ,   0.00, 2.275 
DATA  8 , 493.88, 2.275 , 523.25, 2.275 , 554.37, 2.275 , 587.33, 2.275 , 493.88, 2.275 , 392.00, 2.275 , 329.63, 2.275 , 293.66, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  5 , 110.00, 2.275 ,  73.42, 2.275 ,   0.00, 2.275 ,  98.00, 9.1 ,   0.00, 2.275 
DATA  5 , 466.16, 2.275 , 440.00, 2.275 ,   0.00, 2.275 , 392.00, 9.1 ,   0.00, 2.275 
DATA  7 , 277.18, 2.275 , 261.63, 2.275 ,   0.00, 2.275 , 246.94, 4.55 , 196.00, 2.275 , 164.81, 2.275 , 146.83, 2.275 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  65.41, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,  65.41, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  7 , 261.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 261.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 164.81, 2.275 , 196.00, 2.275 ,   0.00, 2.275 , 196.00, 2.275 ,   0.00, 2.275 , 196.00, 2.275 , 164.81, 2.275 , 146.83, 2.275 
DATA  8 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 

DATA  8 ,  69.30, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,  69.30, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 233.08, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 233.08, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 164.81, 2.275 , 196.00, 2.275 ,   0.00, 2.275 , 196.00, 2.275 ,   0.00, 2.275 , 196.00, 2.275 , 164.81, 2.275 , 146.83, 2.275 
DATA  8 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 

DATA  7 ,  73.42, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,  73.42, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 246.94, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 246.94, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 246.94, 2.275 , 293.66, 2.275 ,   0.00, 2.275 , 293.66, 2.275 ,   0.00, 2.275 , 311.13, 2.275 , 329.63, 2.275 , 349.23, 2.275 
DATA  8 , 392.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 392.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 

DATA  5 ,  49.00, 2.275 ,  98.00, 2.275 ,  87.31, 4.55 ,  82.41, 4.55 ,  73.42, 4.55 
DATA  6 , 554.37, 2.275 , 587.33, 2.275 , 587.33, 2.275 ,   0.00, 2.275 , 659.26, 4.55 , 698.46, 4.55 
DATA  8 , 349.23, 2.275 , 329.63, 2.275 , 311.13, 2.275 , 293.66, 2.275 , 233.08, 2.275 , 220.00, 2.275 , 207.65, 2.275 , 196.00, 2.275 
DATA  4 , 392.00, 4.55 , 392.00, 4.55 , 392.00, 4.55 , 392.00, 4.55 

DATA  8 ,  65.41, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,  65.41, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  7 , 523.25, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 523.25, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 196.00, 2.275 , 164.81, 2.275 ,   0.00, 2.275 , 196.00, 2.275 ,   0.00, 2.275 , 146.83, 2.275 , 164.81, 2.275 , 146.83, 2.275 
DATA  8 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 

DATA  8 ,  69.30, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,  69.30, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 466.16, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 466.16, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 196.00, 2.275 , 164.81, 2.275 ,   0.00, 2.275 , 196.00, 2.275 ,   0.00, 2.275 , 164.81, 2.275 , 146.83, 2.275 , 164.81, 2.275 
DATA  8 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 329.63, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 

DATA  7 ,  73.42, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,  73.42, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 493.88, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 493.88, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 
DATA  8 , 246.94, 2.275 , 293.66, 2.275 ,   0.00, 2.275 , 293.66, 2.275 ,   0.00, 2.275 , 293.66, 2.275 ,   0.00, 2.275 , 293.66, 2.275 
DATA  8 , 392.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 , 392.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 ,   0.00, 2.275 

DATA  9 ,  73.42, 2.275 ,  73.42, 2.275 ,   0.00, 2.275 ,  73.42, 2.275 ,   0.00, 2.275 ,  73.42, 2.275 ,   0.00, 2.275 ,  73.42, 2.275 , 293.66, 18.2 
DATA  2 , 293.66, 18.2 , 369.99, 18.2 
DATA  9 , 369.99, 2.275 , 369.99, 2.275 ,   0.00, 2.275 , 369.99, 2.275 ,   0.00, 2.275 , 369.99, 2.275 ,   0.00, 2.275 , 369.99, 2.275 , 523.25, 18.2 
DATA  9 , 587.33, 2.275 , 587.33, 2.275 ,   0.00, 2.275 , 587.33, 2.275 ,   0.00, 2.275 , 587.33, 2.275 ,   0.00, 2.275 , 587.33, 2.275 , 698.46, 18.2 

DATA  8 , 146.83, 2.275 , 110.00, 2.275 , 130.81, 2.275 , 146.83, 2.275 , 130.81, 2.275 , 103.83, 2.275 ,  98.00, 2.275 ,  92.50, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA  8 ,  73.42, 2.275 ,  87.31, 2.275 ,  73.42, 2.275 ,  32.70, 2.275 ,  65.41, 2.275 ,  34.65, 2.275 ,  69.30, 2.275 ,  73.42, 2.275 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 
DATA  1 ,   0.00, 18.2 

DATA 0


SUB Sleep(s#) STATIC
    endt#=TIMER+s#
    WHILE (TIMER < endt#):WEND
END SUB

SUB DrawTCow(cy!, rad!, ang!) STATIC
    SHARED imgCow%(),SW2%,cowW2,cowH2
    x!=SW2%+COS(ang!)*rad!
    y!=cy!+SIN(ang!)*rad!*.1
    PUT (x!-cowW2,y!-cowH2),imgCow%,XOR
END SUB

SUB UpdateScore(points%) STATIC
    SHARED score%,TxtSW%
    score%=score%+points%
    LOCATE 1,TxtSW%-25:PRINT "Score: ";STR$(score%)
END SUB

SUB DrawCowStack(x%,y%,nCows%) STATIC
SHARED imgCow%(),CowW,CowH
    LINE(x%,y%)-(x%+CowW,y%-CowH*8),0,BF
    FOR c%=1 TO nCows%
        cy%=y% - (c%+1)*CowH
        PUT (x%,cy%), imgCow%,OR
    NEXT c%
END SUB

SUB DrawTorn(x%,y%,rad%) STATIC
    arcLen!=3.1416/2
    FOR r%=1 TO rad%
        s!=RND*3.1416*2
        CIRCLE (x%,y%),r%,1,s!,s!+arcLen!
    NEXT r%
END SUB

SUB DrawAim(ang!,vel!,c%) STATIC
    SHARED TxtSW%,TxtSH%

    x%=0:y%=SYSTEM(6)/2
    stR=16:enR=16+vel!*8
    enX=x%+COS(ang!)*enR
    enY=y%+SIN(ang!)*enR
    LINE (x%+COS(ang!)*stR, y%+SIN(ang!)*stR)-(enX,enY),c%

    LOCATE TxtSH%,1
    PRINT "Ang ";
    PRINT USING "###.#";-ang!*180/3.1416;
    PRINT ", Vel ";
    PRINT USING "##.##";vel!;
END SUB

SUB ReadImageData(img%(1),w%,h%,invert%) STATIC
    img%(0)=w%
    img%(1)=h%
    ww%=w%/16
    words%=w%*h%/16
    FOR y%=h%-1 TO 0 STEP -1
        FOR x%=0 TO ww%-1
            idx%=y%*ww%+x%+2
            READ img%(idx%)
        NEXT x%
    NEXT y%
    IF invert%=1 THEN
        FOR i%=0 TO words%-1:img%(i%+2)=NOT img%(i%+2):NEXT i%
    END IF
END SUB


